# -*- coding: utf-8 -*-
"""Generate Synthetic Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nOifDwllOicJ_02XZWO3Cv6e4evuEhCF
"""

import csv
import random
from datetime import datetime, timedelta

# Define possible values for each column
unit_sizes = ['Fire Team', 'Squad', 'Platoon', 'Company', 'Battalion']
unit_types = ["Infantry", "Armored", "Special Forces", "Mechanized", "Airborne", "Engineers", "Military Police", "Reconnaissance", "Combat Medic Team"]
experience_levels = ['Rookie', 'Mixed', 'Veteran', 'Elite']
equipment_types = ['Standard Issue', 'Advanced Weaponry', 'Specialized Gear', 'Riot Gear', 'Medical Supplies', 'Basic (Limited Ammo)']
command_structures = ['Centralized', 'Decentralized', 'Centralized (Flexible)', 'Decentralized (Limited Communication)', 'Centralized (Strict Hierarchy)']
logistics_levels = ["Minimal", "Basic", "Adequate", "Well-Supplied", "Overstocked"]
enemy_types = ["Irregular Militia", "Light Infantry", "Mechanized Infantry", "Armored", "Special Forces", "Guerrilla", "Cyber Warfare", "Drone Operators"]
enemy_capabilities = ['Standard Equipment', 'Improvised Explosive Devices (IEDs)', 'Sniper Teams', 'Advanced Communication']
morale_levels = ['Low', 'Medium', 'High', 'Fanatical']
leadership_qualities = ['Weak', 'Competent', 'Strong', 'Charismatic Leader', 'Incompetent', 'Tactical Genius']
mission_objectives = ["Reconnaissance", "Secure Objective", "Eliminate Enemy Force", "Rescue/Evacuation", "Peacekeeping", "Counter-insurgency", "Cyber Defense", "Infrastructure Protection"]
terrain_types = ["Urban", "Suburban", "Rural", "Forest", "Jungle", "Desert", "Mountain", "Arctic", "Coastal", "Island"]
weather_conditions = ["Clear", "Cloudy", "Light Rain", "Heavy Rain", "Thunderstorm", "Snow", "Blizzard", "Fog", "Sandstorm", "Extreme Heat", "Extreme Cold"]
times_of_day = ['Day', 'Night', 'Dawn', 'Dusk']
civilian_presence = ['None', 'Low', 'Medium', 'High']
supporting_arms = ['No', 'Yes (Artillery)', 'Yes (Air Support)', 'Yes (Air & Artillery)', 'Yes (Artillery & Close Air Support)', 'Yes (Naval Gunfire)']
enemy_movements = ["Static Defense", "Patrolling", "Aggressive Push", "Tactical Retreat", "Guerrilla Tactics", "Infiltration", "Encirclement"]
rules_of_engagement = ["Weapons Free", "Return Fire Only", "Protect Civilians at All Costs", "Minimize Collateral Damage", "Non-Lethal Force Only", "Observe and Report"]
actions_taken = ['Maneuver (Flank)', 'Hold Position', 'Engage', 'Withdraw', 'Negotiate', 'Observe and Report', 'Evacuate Civilians', 'Deliver Medical Supplies', 'Secure Communication Hub']

def generate_unit_size():
    size = random.choice(unit_sizes)
    if size == 'Squad':
        return f"{random.randint(4, 12)} ({size})"
    elif size == 'Platoon':
        return f"{random.randint(20, 50)} ({size})"
    elif size == 'Company':
        return f"{random.randint(80, 150)} ({size})"
    else:  # Battalion
        return f"{random.randint(300, 1000)} ({size})"

def generate_record():
    record = [
        generate_unit_size(),
        random.choice(unit_types),
        random.choice(experience_levels),
        random.choice(equipment_types),
        random.choice(command_structures),
        random.choice(logistics_levels),
        str(random.randint(10, 500)) if random.random() > 0.1 else 'NA',
        random.choice(enemy_types) if random.random() > 0.1 else 'NA',
        random.choice(enemy_capabilities) if random.random() > 0.2 else '',
        random.choice(morale_levels) if random.random() > 0.2 else 'NA',
        random.choice(leadership_qualities) if random.random() > 0.2 else 'NA',
        random.choice(mission_objectives),
        random.choice(terrain_types),
        random.choice(weather_conditions),
        random.choice(times_of_day),
        random.choice(civilian_presence),
        random.choice(supporting_arms),
        f"{random.choice(terrain_types)} ({random.choice(['Heavy Dust', 'Light Vegetation', 'Rocky Terrain', 'Dense Vegetation', 'Narrow Streets', 'High-rise Buildings', 'Sand Dunes'])})",
        random.choice(enemy_movements) if random.random() > 0.1 else '',
        random.choice(rules_of_engagement),
        random.choice(actions_taken)
    ]
    return record

# Generate the dataset
dataset = [generate_record() for _ in range(5000)]

# Write to CSV file
filename = 'military_decision_dataset.csv'
with open(filename, 'w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow([
        'Unit Size', 'Unit Type', 'Experience Level', 'Equipment', 'Command Structure',
        'Logistics', 'Estimated Enemy Size', 'Enemy Unit Type Composition',
        'Known Enemy Capabilities', 'Morale', 'Leadership', 'Mission Objective',
        'Terrain Type', 'Weather Conditions', 'Time of Day', 'Civilian Presence',
        'Supporting Arms', 'Terrain Specificity', 'Enemy Movement',
        'Rules of Engagement', 'Action Taken'
    ])
    writer.writerows(dataset)

print(f"Dataset with 1000 records has been generated and saved to {filename}")

pd.read_csv(filename)